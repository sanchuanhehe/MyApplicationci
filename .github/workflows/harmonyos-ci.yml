name: HarmonyOS CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # 1. 拉取代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. 设置 JDK 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. 缓存 HarmonyOS CLI 工具
      - name: Cache HarmonyOS CLI tools
        id: cache-harmonyos-tools
        uses: actions/cache@v3
        with:
          path: ${{ runner.temp }}/harmonyos-tools
          key: harmonyos-tools-${{ runner.os }}-5.0.7.100
          restore-keys: |
            harmonyos-tools-${{ runner.os }}-

      - name: Install HarmonyOS CLI tools (if not cached)
        if: steps.cache-harmonyos-tools.outputs.cache-hit != 'true'
        run: |
          mkdir -p ${{ runner.temp }}/harmonyos-tools
          wget -O ${{ runner.temp }}/harmonyos-tools/commandline-tools-linux.zip https://harmonytools.sanchuanhehe.com/commandline-tools-linux-x64-5.0.7.100.zip
          unzip ${{ runner.temp }}/harmonyos-tools/commandline-tools-linux.zip -d ${{ runner.temp }}/harmonyos-tools/
          chmod -R +x ${{ runner.temp }}/harmonyos-tools/command-line-tools/bin

      - name: Set up environment variables
        run: |
          export COMMANDLINE_TOOL_DIR="${{ runner.temp }}/harmonyos-tools"
          export PATH="${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH"
          export HDC_HOME="${COMMANDLINE_TOOL_DIR}/command-line-tools/sdk/default/openharmony/toolchains"
          export PATH="$HDC_HOME:$PATH"
          echo "COMMANDLINE_TOOL_DIR=${COMMANDLINE_TOOL_DIR}" >> $GITHUB_ENV
          echo "PATH=${COMMANDLINE_TOOL_DIR}/command-line-tools/bin:$PATH" >> $GITHUB_ENV
          echo "HDC_HOME=${HDC_HOME}" >> $GITHUB_ENV
          echo "PATH=$HDC_HOME:$PATH" >> $GITHUB_ENV

      # 构建 HAP 文件
      - name: Build HAP
        run: |
          cd ${{ github.workspace }}
          ohpm install --all
          ohpm install --all --directory entry
          hvigorw clean --no-daemon
          hvigorw assembleHap --mode module -p product=default -p buildMode=debug --no-daemon

      # 上传构建输出作为 artifact
      - name: Upload Build Output
        uses: actions/upload-artifact@v2
        with:
          name: build-output
          path: ./entry/build/default/outputs/default/

  publish:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v') # 仅在特定标签触发
    steps:
      # 1. 拉取代码
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. 设置 JDK 环境
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      # 3. 下载构建输出 artifact
      - name: Download Build Output
        uses: actions/download-artifact@v2
        with:
          name: build-output
          path: ./entry/build/default/outputs/default/

      # 4. 签名 HAP 文件
      - name: Sign HAP
        run: |
          cd ${{ github.workspace }}
          java -jar ${{ runner.temp }}/harmonyos-tools/command-line-tools/sdk/default/openharmony/toolchains/lib/hap-sign-tool.jar \
          sign-app \
          -keyAlias "ide_demo_app" \
          -signAlg "SHA256withECDSA" \
          -mode "localSign" \
          -appCertFile "signing/demo.cer" \
          -profileFile "signing/demo.p7b" \
          -inFile "./entry/build/default/outputs/default/entry-default.hap" \
          -keystoreFile "signing/idedemokey.p12" \
          -outFile "./entry/build/default/outputs/default/entry-default-signed.hap" \
          -keyPwd "${{ secrets.KEY_PASSWORD }}" \
          -keystorePwd "${{ secrets.KEYSTORE_PASSWORD }}" \
          -signCode "1"

      # 5. 创建 GitHub Release
      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      # 6. 上传 HAP 文件到 GitHub Release
      - name: Upload HAP to GitHub Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./entry/build/default/outputs/default/entry-default-signed.hap
          asset_name: entry-default-signed.hap
          asset_content_type: application/octet-stream
