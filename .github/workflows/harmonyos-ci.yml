name: HarmonyOS CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # 1. 拉取代码
    - name: Checkout code
      uses: actions/checkout@v3

    # 2. 设置 JDK 环境
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'

    # 3. 缓存 HarmonyOS CLI 工具
    - name: Cache HarmonyOS CLI tools
      id: cache-harmonyos-tools
      uses: actions/cache@v3
      with:
        path: /opt/harmonyos-tools  # 缓存的路径
        key: harmonyos-tools-${{ runner.os }}-${{ hashFiles('harmonyos-tools/commandline-tools-linux.zip') }}
        restore-keys: |
          harmonyos-tools-${{ runner.os }}-

    - name: Install HarmonyOS CLI tools (if not cached)
      if: steps.cache-harmonyos-tools.outputs.cache-hit != 'true'
      run: |
        sudo mkdir -p /opt/harmonyos-tools
        sudo wget -O /opt/harmonyos-tools/commandline-tools-linux.zip https://harmonytools.sanchuanhehe.com/commandline-tools-linux-x64-5.0.7.100.zip
        sudo unzip /opt/harmonyos-tools/commandline-tools-linux.zip -d /opt/harmonyos-tools/
        sudo chmod -R +x /opt/harmonyos-tools/command-line-tools/bin

    # 4. 配置环境变量
    - name: Set up environment variables
      run: |
        echo "COMMANDLINE_TOOL_DIR=/opt/harmonyos-tools" >> $GITHUB_ENV
        echo "PATH=/opt/harmonyos-tools/command-line-tools/bin:$PATH" >> $GITHUB_ENV
        echo "HDC_HOME=/opt/harmonyos-tools/command-line-tools/sdk/default/openharmony/toolchains" >> $GITHUB_ENV
        echo "PATH=$HDC_HOME:$PATH" >> $GITHUB_ENV

    # 5. 打印环境变量和验证工具
    - name: Print environment variables
      run: |
        echo "COMMANDLINE_TOOL_DIR=$COMMANDLINE_TOOL_DIR"
        echo "PATH=$PATH"
        echo "HDC_HOME=$HDC_HOME"

    - name: Check HarmonyOS CLI tools
      run: |
        sudo ls -al /opt/harmonyos-tools/command-line-tools/bin/
        if [ -f "/opt/harmonyos-tools/command-line-tools/bin/ohos" ]; then
          echo "ohos command found"
        else
          echo "ohos command not found"
        fi

    - name: Check commandline-tools
      run: |
        java -version
        ohos -v
        hvigorw -v
        ohpm -v

    # 6. 安装项目依赖
    - name: Install project dependencies
      run: |
        cd ${{ github.workspace }}
        ohpm install --all
        ohpm install --all --directory entry

    # 7. 构建 HAP 文件
    - name: Build HAP
      run: |
        cd ${{ github.workspace }}
        hvigorw clean --no-daemon
        hvigorw assembleHap --mode module -p product=default -p buildMode=debug --no-daemon

    # 8. 签名 HAP 文件
    - name: Sign HAP
      run: |
        cd ${{ github.workspace }}
        java -jar /opt/harmonyos-tools/command-line-tools/sdk/default/openharmony/toolchains/lib/hap-sign-tool.jar \
        sign-app \
        -keyAlias "ide_demo_app" \
        -signAlg "SHA256withECDSA" \
        -mode "localSign" \
        -appCertFile "signing/demo.cer" \
        -profileFile "signing/demo.p7b" \
        -inFile "./entry/build/default/outputs/default/entry-default.hap" \
        -keystoreFile "signing/idedemokey.p12" \
        -outFile "./entry/build/default/outputs/default/entry-default-signed.hap" \
        -keyPwd "${{ secrets.KEY_PASSWORD }}" \
        -keystorePwd "${{ secrets.KEYSTORE_PASSWORD }}" \
        -signCode "1"

    # 9. 上传 HAP 文件到 GitHub Release
    - name: Upload HAP to GitHub Release
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./entry/build/default/outputs/default/entry-default-signed.hap
        asset_name: entry-default-signed.hap
        asset_content_type: application/octet-stream
